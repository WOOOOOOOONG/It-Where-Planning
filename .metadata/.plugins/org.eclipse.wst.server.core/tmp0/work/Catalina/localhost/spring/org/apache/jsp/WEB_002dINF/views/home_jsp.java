/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2020-02-14 07:01:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1579661810000L));
    _jspx_dependants.put("jar:file:/D:/sewoong_workspace/7_Framework/2_Spring/workspace/springProject/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("\t<title>Home</title>\n");
      out.write("\t<style>\n");
      out.write("\t.wrap {\n");
      out.write("\t\twidth:50%;\n");
      out.write("\t\tmargin:auto;\n");
      out.write("\t}\n");
      out.write("\t#boardTable {\n");
      out.write("\t\twidth:100%;\n");
      out.write("\t\tborder:solid 1px white;\n");
      out.write("\t}\n");
      out.write("\t#boardTable th, #boardTable td {\n");
      out.write("\t\tborder:solid 1px white;\n");
      out.write("\t\ttext-align:center;\n");
      out.write("\t}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "common/menubar.jsp", out, false);
      out.write("\n");
      out.write("\t\n");
      out.write("\t<h1 align=\"center\">게시글 TOP5 목록</h1>\n");
      out.write("\t<div class=\"wrap\">\n");
      out.write("\t\t<table id=\"boardTable\">\n");
      out.write("\t\t\t<thead>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<th>번호</th>\n");
      out.write("\t\t\t\t\t<th>제목</th>\n");
      out.write("\t\t\t\t\t<th>작성자</th>\n");
      out.write("\t\t\t\t\t<th>날짜</th>\n");
      out.write("\t\t\t\t\t<th>조회수</th>\n");
      out.write("\t\t\t\t\t<th>첨부파일</th>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t</thead>\n");
      out.write("\t\t\t<tbody>\n");
      out.write("\t\t\t</tbody>\n");
      out.write("\t\t</table>\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("\t<script>\n");
      out.write("\t\n");
      out.write("\t$(function(){\n");
      out.write("\t\ttopList();\n");
      out.write("\t\t\n");
      out.write("\t\t// 5초에 한번씩 재호출\n");
      out.write("\t\tsetInterval(function(){\n");
      out.write("\t\t\ttopList();\n");
      out.write("\t\t}, 5000);\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\tfunction topList(){\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl:\"topList.do\",\n");
      out.write("\t\t\tdataType:\"json\",\n");
      out.write("\t\t\tsuccess:function(data){\n");
      out.write("\t\t\t\tconsole.log(data);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t$tableBody = $(\"#boardTable tbody\");\n");
      out.write("\t\t\t\t$tableBody.html(\"\");\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tfor(var i in data){\n");
      out.write("\t\t\t\t\tvar $tr = $(\"<tr>\");\n");
      out.write("\t\t\t\t\tvar $bId = $(\"<td>\").text(data[i].bId);\n");
      out.write("\t\t\t\t\tvar $bTitle = $(\"<td>\").text(data[i].bTitle);\n");
      out.write("\t\t\t\t\tvar $bWriter = $(\"<td>\").text(data[i].bWriter);\n");
      out.write("\t\t\t\t\tvar $bCreateDate = $(\"<td>\").text(data[i].bCreateDate);\n");
      out.write("\t\t\t\t\tvar $bCount = $(\"<td>\").text(data[i].bCount);\n");
      out.write("\t\t\t\t\tvar $bFile = $(\"<td>\").text(\" \");\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t\tif(data[i].originalFileName != null){\n");
      out.write("\t\t\t\t\t\t$bFile = $(\"<td>\").text(\"◎\");\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t\t$tr.append($bId);\n");
      out.write("\t\t\t\t\t$tr.append($bTitle);\n");
      out.write("\t\t\t\t\t$tr.append($bWriter);\n");
      out.write("\t\t\t\t\t$tr.append($bCreateDate);\n");
      out.write("\t\t\t\t\t$tr.append($bCount);\n");
      out.write("\t\t\t\t\t$tr.append($bFile);\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t\t$tableBody.append($tr);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\terror:function(e){\n");
      out.write("\t\t\t\tconsole.log(e);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t}\n");
      out.write("\t</script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
